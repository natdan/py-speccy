from assembler.assert_util import assert_decode


class TestDecodeSOP:
    def test_rl(self) -> None:
        assert_decode("rl b", 0xcb, 0x10)
        assert_decode("rl c", 0xcb, 0x11)
        assert_decode("rl d", 0xcb, 0x12)
        assert_decode("rl e", 0xcb, 0x13)
        assert_decode("rl h", 0xcb, 0x14)
        assert_decode("rl l", 0xcb, 0x15)
        assert_decode("rl a", 0xcb, 0x17)
        assert_decode("rl (hl)", 0xcb, 0x16)
        assert_decode("rl (ix+123)", 0xdd, 0xcb, 123, 0x16)
        assert_decode("rl (ix-4)", 0xdd, 0xcb, 252, 0x16)
        assert_decode("rl (iy+123)", 0xfd, 0xcb, 123, 0x16)
        assert_decode("rl (iy-123)", 0xfd, 0xcb, 133, 0x16)

    def test_rr(self) -> None:
        assert_decode("rr b", 0xcb, 0x18)
        assert_decode("rr c", 0xcb, 0x19)
        assert_decode("rr d", 0xcb, 0x1a)
        assert_decode("rr e", 0xcb, 0x1b)
        assert_decode("rr h", 0xcb, 0x1c)
        assert_decode("rr l", 0xcb, 0x1d)
        assert_decode("rr a", 0xcb, 0x1f)
        assert_decode("rr (hl)", 0xcb, 0x1e)
        assert_decode("rr (ix+123)", 0xdd, 0xcb, 123, 0x1e)
        assert_decode("rr (ix-4)", 0xdd, 0xcb, 252, 0x1e)
        assert_decode("rr (iy+123)", 0xfd, 0xcb, 123, 0x1e)
        assert_decode("rr (iy-123)", 0xfd, 0xcb, 133, 0x1e)

    def test_rrc(self) -> None:
        assert_decode("rrc b", 0xcb, 0x08)
        assert_decode("rrc c", 0xcb, 0x09)
        assert_decode("rrc d", 0xcb, 0x0a)
        assert_decode("rrc e", 0xcb, 0x0b)
        assert_decode("rrc h", 0xcb, 0x0c)
        assert_decode("rrc l", 0xcb, 0x0d)
        assert_decode("rrc a", 0xcb, 0x0f)
        assert_decode("rrc (hl)", 0xcb, 0x0e)
        assert_decode("rrc (ix+123)", 0xdd, 0xcb, 123, 0x0e)
        assert_decode("rrc (ix-4)", 0xdd, 0xcb, 252, 0x0e)
        assert_decode("rrc (iy+123)", 0xfd, 0xcb, 123, 0x0e)
        assert_decode("rrc (iy-123)", 0xfd, 0xcb, 133, 0x0e)

    def test_sla(self) -> None:
        assert_decode("sla b", 0xcb, 0x20)
        assert_decode("sla c", 0xcb, 0x21)
        assert_decode("sla d", 0xcb, 0x22)
        assert_decode("sla e", 0xcb, 0x23)
        assert_decode("sla h", 0xcb, 0x24)
        assert_decode("sla l", 0xcb, 0x25)
        assert_decode("sla a", 0xcb, 0x27)
        assert_decode("sla (hl)", 0xcb, 0x26)
        assert_decode("sla (ix+123)", 0xdd, 0xcb, 123, 0x26)
        assert_decode("sla (ix-4)", 0xdd, 0xcb, 252, 0x26)
        assert_decode("sla (iy+123)", 0xfd, 0xcb, 123, 0x26)
        assert_decode("sla (iy-123)", 0xfd, 0xcb, 133, 0x26)

    def test_sra(self) -> None:
        assert_decode("sra b", 0xcb, 0x28)
        assert_decode("sra c", 0xcb, 0x29)
        assert_decode("sra d", 0xcb, 0x2a)
        assert_decode("sra e", 0xcb, 0x2b)
        assert_decode("sra h", 0xcb, 0x2c)
        assert_decode("sra l", 0xcb, 0x2d)
        assert_decode("sra a", 0xcb, 0x2f)
        assert_decode("sra (hl)", 0xcb, 0x2e)
        assert_decode("sra (ix+123)", 0xdd, 0xcb, 123, 0x2e)
        assert_decode("sra (ix-4)", 0xdd, 0xcb, 252, 0x2e)
        assert_decode("sra (iy+123)", 0xfd, 0xcb, 123, 0x2e)
        assert_decode("sra (iy-123)", 0xfd, 0xcb, 133, 0x2e)

    def test_srl(self) -> None:
        assert_decode("srl b", 0xcb, 0x38)
        assert_decode("srl c", 0xcb, 0x39)
        assert_decode("srl d", 0xcb, 0x3a)
        assert_decode("srl e", 0xcb, 0x3b)
        assert_decode("srl h", 0xcb, 0x3c)
        assert_decode("srl l", 0xcb, 0x3d)
        assert_decode("srl a", 0xcb, 0x3f)
        assert_decode("srl (hl)", 0xcb, 0x3e)
        assert_decode("srl (ix+123)", 0xdd, 0xcb, 123, 0x3e)
        assert_decode("srl (ix-4)", 0xdd, 0xcb, 252, 0x3e)
        assert_decode("srl (iy+123)", 0xfd, 0xcb, 123, 0x3e)
        assert_decode("srl (iy-123)", 0xfd, 0xcb, 133, 0x3e)

    def test_inc(self) -> None:
        assert_decode("inc b", 0x04)
        assert_decode("inc c", 0x0c)
        assert_decode("inc d", 0x14)
        assert_decode("inc e", 0x1c)
        assert_decode("inc h", 0x24)
        assert_decode("inc l", 0x2c)
        assert_decode("inc a", 0x3c)
        assert_decode("inc (hl)", 0x34)
        assert_decode("inc (ix+123)", 0xdd, 0x34, 123)
        assert_decode("inc (ix-4)",   0xdd, 0x34, 252)
        assert_decode("inc (iy+123)", 0xfd, 0x34, 123)
        assert_decode("inc (iy-123)", 0xfd, 0x34, 133)

    def test_dec(self) -> None:
        assert_decode("dec b", 0x05)
        assert_decode("dec c", 0x0d)
        assert_decode("dec d", 0x15)
        assert_decode("dec e", 0x1d)
        assert_decode("dec h", 0x25)
        assert_decode("dec l", 0x2d)
        assert_decode("dec a", 0x3d)
        assert_decode("dec (hl)", 0x35)
        assert_decode("dec (ix+123)", 0xdd, 0x35, 123)
        assert_decode("dec (ix-4)",   0xdd, 0x35, 252)
        assert_decode("dec (iy+123)", 0xfd, 0x35, 123)
        assert_decode("dec (iy-123)", 0xfd, 0x35, 133)
